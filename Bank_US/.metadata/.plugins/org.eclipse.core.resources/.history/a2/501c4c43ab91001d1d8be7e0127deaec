package com.example.Bankmangement.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.example.Bankmangement.security.JwtAuthenticationEntryPoint;
import com.example.Bankmangement.security.JwtAuthenticationFilter;

@Configuration
@EnableMethodSecurity
public class SecurityConfig{
	
	
	private UserDetailsService userDetailsService;
	
	private JwtAuthenticationFilter authenticationFilter;
	
	private JwtAuthenticationEntryPoint authenticationEntryPoint;
	
	public SecurityConfig(UserDetailsService userDetailsService, JwtAuthenticationEntryPoint authenticationEntryPoint, JwtAuthenticationFilter authenticationFilter  ){
		this.userDetailsService=userDetailsService;
		this.authenticationEntryPoint = authenticationEntryPoint;
		this.authenticationFilter = authenticationFilter;
	}
	
	@Bean
   public static PasswordEncoder passwordEncoder(){
        return new BCryptPasswordEncoder();
    }
	
	@Bean
	public AuthenticationManager authenticationManager(AuthenticationConfiguration configuration) throws Exception{
		return configuration.getAuthenticationManager();
	}

	@Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http.csrf().disable().exceptionHandling().authenticationEntryPoint(jwtAuthenticationEntryPoint)
                .and().sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()
                .authorizeRequests()
                .antMatchers("/login").permitAll()
                .antMatchers("/register").permitAll()
                .antMatchers("/swagger-ui/**").permitAll()
                .antMatchers("/v3/api-docs/**").permitAll()

                .antMatchers("/h2-console/*").permitAll()
                .antMatchers("/h2-console").permitAll()
                .antMatchers("/favicon.ico").permitAll()
                .anyRequest().authenticated();

        http.addFilterBefore(jwtRequestFilter, UsernamePasswordAuthenticationFilter.class);
        return http.build();
    }
	
//	  @Bean
//	     SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
//	        http.csrf().disable()
//	            .authorizeHttpRequests((authz) -> authz
//	            		.antMatchers("/api/auth/**").permitAll()
//	            		.antMatchers("/error").permitAll()
//	                .anyRequest().authenticated()).exceptionHandling(exception -> exception.authenticationEntryPoint(authenticationEntryPoint)
//	                	).sessionManagement(session -> session
//	                			.sessionCreationPolicy(SessionCreationPolicy.STATELESS)
//	            );
//	        http.addFilterBefore(authenticationFilter, UsernamePasswordAuthenticationFilter.class);
//	        return http.build();
//	    }
	
	
	
	
	
	
	
	@Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http.headers().frameOptions().disable().and().cors().and().csrf().disable().exceptionHandling()
                .and().sessionManagement()
                .sessionCreationPolicy(SessionCreationPolicy.STATELESS).and().authorizeRequests()
                .antMatchers("/v2/api-docs", "/swagger-ui/**", "/api/auth/**","/swagger-resources/**", "/*/swagger-resources/**",
                        "/*/v2/api-docs")
                .permitAll();

 

        http.httpBasic().disable();

        return http.build();

 

    }
}

